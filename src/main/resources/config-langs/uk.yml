# Ukrainian config translation for BreweryX
# Author: Yoko so

config:
  language: |
    Переклад, який буде використано [uk]
    Доступні мови: en (Англійська), de (Німецька), es (Іспанська), fr (Француська), it (Італійська), ru (Російська), zh (Китайська), uk (Українська)
  updateCheck: |
    Чи варто BreweryX перевіряти наявність оновлень? Вкажіть, яку службу ви хочете використовувати для перевірки оновлень, або вимкніть її.
    Доступні параметри: GitHub, Snapshots, Spigot, None [GitHub]
  autosave: "Інтервал автозбереження в хвилинах [10]"
  pluginPrefix: "Префікс, який використовується в повідомленнях"
  debug: 'Показувати повідомлення про налагодження в Логах [false]'
  storage:
    header: "-- Налаштування зберігання --"
    type: |
      Який тип сховища використовувати [FLATFILE]
      Доступні типи: FlatFile, MySQL, SQLite, MongoDB
    database: "Ім'я бази даних. Якщо база даних є файлом, це буде ім’я файлу. [brewery-data]"
  enableHome: "Якщо гравець прокидається в /home під час входу в систему після надмірного вживання алкоголю (/home плагін повинен бути встановлений!) [true]"
  homeType: |
    Тип домашнього телепорту: ['cmd: home']
     bed = Гравець буде телепортований до свого спауна на ліжку
     'cmd: home' = /home буде виконано гравцем. Він повинен мати на це дозволи без будь-яких затримок!
     'cmd: spawn' = /spawn буде виконано гравцем.
     'cmd: whatever' = /whatever буде виконано гравцем.
  enableWake: |
    Якщо гравець "прокидається" у випадковому місці, перебуваючи в автономному режимі протягом деякого часу під час пиття (місця мають бути визначені за допомогою '/brew Wakeup add' через адміністратора)
    Гравець прокидається в найближчому з двох випадкових місць свого світу [true]
  enableLoginDisallow: "Якщо гравцеві, можливо, доведеться спробувати кілька разів, увійшовши в систему в стані алкогольного сп’яніння [true]"
  enableKickOnOverdrink: "Якщо гравець незабаром непритомніє (його викидають із сервера), якщо він вип’є максимально можливу кількість алкоголю [false]"
  enablePuke: |
    Якщо гравець блює під час сильного сп’яніння (випадає предмет, визначений нижче) [true]
    Предмет не може бути зібраний і залишається на землі, поки не зникне.
  pukeItem: |
    Предмети, які випадають кілька разів, неможливо зібрати під час блювання [Soul_Sand]
    Може бути список елементів, наприклад [Soul_sand, Slime_block, Dirt]
  pukeDespawntime: |
    Час у секундах до зникнення блювоти, (В майнкрафті стандартно це 300 = 5 хвилин) [60]
     Якщо час зникнення предмета було змінено у spigot.yml, час pukeDespawntime також змінюється.
  stumblePercent: "Скільки гравець спотикається залежно від кількості випитого алкоголю. Можна встановити значення 0 і вище 100 [100]"
  showStatusOnDrink: "Покажіть гравцеві своє сп'яніння, коли він п'є напій або їсть дренажний предмет [true]"
  drainItems: "Витратний матеріал/сила. Знижує рівень алкоголю на <міцність> під час споживання. (Список)"
  enableCauldronParticles: |
    Показує частинки над котлами, коли в них є інгредієнти та джерело тепла.  [true]
    Зміна кольору частинок може допомогти визначити час приготування деяких рецептів
  minimalParticles: "Якщо частинки казана слід звести до мінімуму [false]"
  craft-enableSealingTable: "Якщо ввімкнуто створення та використання таблиці заварювання (2 пляшки на 4 дошках) [true, true]"
  sealingTableBlock: |
    За замовчуванням Brewery використовує Коптильню як таблицю запечатування, цей параметр дозволяє вам змінити це
    ВАЖЛИВО: це має бути контейнер, тобто блок, який може зберігати елементи (типу, Коптильня, Скриня, Плавільня).
  alwaysShowQuality: "Завжди показуйте 1-5 зірок на предметі залежно від якості. Якщо false, вони з’являться лише під час варіння [true]"
  alwaysShowAlc: |
    Завжди вказуйте вміст алкоголю на предметі. Якщо false, він відображатиметься лише в пивоварному стенді [false]
    Закриті варки не відображатимуть вміст алкоголю незалежно від цього налаштування
  alwaysShowAlcIndicator: |
    Завжди показуйте, що напій є алкогольним, додавши "Алкогольне" в історію предмета
    Запечатані варки покажуть, що варка алкогольна, але не вміст алкоголю
  showBrewer: "Якщо треба показати, хто зварив напій [false]"
  requireKeywordOnSigns: "Якщо Діжки створюються лише тоді, коли розміщений знак містить слово \"Діжка\" (або переклад при використанні іншої мови) [true]"
  ageInMCBarrels: "Якщо старіння в -Minecraft- Діжки ввімкнено [true] і скільки пивоварних напоїв можна додати в них [6]"
  agingYearDuration: "Тривалість (у хвилинах) 'року' під час витримки напоїв [20]"
  commandAliases: |
    Псевдоніми для команди '/breweryx'. Щоб набуло чинності, потрібно перезапустити сервер. (list) [brewery, brew]
  enableEncode: |
    Використані інгредієнти та інші дані про пивоваріння зберігаються в усіх елементах пивоварні. Для запобігання
     хакерські клієнти не могли прочитати, що саме було використано для варіння продукту, дані можуть бути закодовані/зашифровані.
     Це швидкий процес, щоб зупинити гравців від злому рецептів, коли вони отримають напій.

     Only drawback: елементи brew можна використовувати лише на іншому сервері з таким же Ісходним Кодом.
     У разі використання Brews на кількох серверах (BungeeCord) визначте базу даних MYSQL у налаштуваннях 'сховища'.

     Тож увімкніть це, якщо ви хочете ускладнити обман рецептів, але не діліться будь-якими варіннями за допомогою світових завантажень, схем чи іншими способами. [false]
  useOtherPlugins: |
    -- Сумісність плагінів --

    Увімкнути перевірку інших плагінів (якщо встановлено) на наявність дозволів Barrel [true]
    Плагіни 'Landlord' і 'Protection Stones' використовують прапор WorldGuard. 'ClaimChunk' підтримується нативно.
  useVirtualChestPerms: |
    Використовуйте віртуальну скриню під час відкриття бочки, щоб перевірити всі інші плагіни захисту
    Це може заплутати плагіни Anti-Cheat, але в іншому випадку добре використовувати
    використовуйте це для плагіна 'Residence' та будь-яких інших, які не перевіряють усі випадки в PlayerInteractEvent
  useLogBlock: "Увімкніть журнал інвентаризації бочок у LogBlock [true]"
  useOffhandForCauldron: "Якщо предмети в другій руці також слід додати до казана. [false]"
  loadDataAsync: |
    Цей параметр більше нічого не робить і буде видалено в наступних випусках BreweryX.
    BreweryX завжди завантажуватиме дані асинхронно, за винятком запуску та завершення роботи сервера.
  hangoverDays: "Час (у днях), протягом якого дані про сп’яніння залишаються в пам’яті після того, як гравець вийшов з мережі, щоб застосувати похмілля тощо. [7]"
  onlyAllowBrewsInBarrels: "If only Brewery drinks can be put into barrels [false]"
  colorInBarrels-Brewer: "Розфарбуйте інформацію про предмет (історію) залежно від якості, коли він 1. у бочці та/або 2. у пивоварній підставці [true, true]"
  openLargeBarrelEverywhere: "Якщо велику бочку можна відкрити, клацнувши будь-який з її блоків, а не лише кран або знак. Це завжди вірно для Маленьких Діжок. [true]"
  barrelInvSizes: |
    Hскільки рядків повинен мати інвентар кожного типу бочки [3,1]
    Має бути цілим числом від 1 до 6 (обмеження Minecraft / GUI)
    (Щоб зміни набули чинності, потрібно перезапустити сервер)
  brewHopperDump: "Дозвольте спорожнити варево в бункери, щоб викинути варення, зберігаючи скляну пляшку [true]"
  enableChatDistortion: |
    Якщо написаний чат спотворюється, коли гравець п'яний, так що це виглядає як п'яний текст
    Наскільки спотворюється чат, залежить від того, наскільки п'яний гравець
    Нижче наведено налаштування того, що і як відбуваються зміни в чаті
  logRealChat: "Зареєструйте в журналі серверів те, що насправді написав гравець до того, як його слова були змінені [false]"
  distortCommands: "Текст після вказаних команд спотворюватиметься під час сп'яніння (list) [- /gl]"
  distortSignText: "Спотворити текст, написаний на знаку, будучи п'яним [false]"
  distortBypass: |
    Додайте текст чату до цих літер, щоб уникнути спотворення чату (використовуйте "," як роздільник) (список) [- '[,]']
     Приклад чату: Привіт, я п'яний *Я тестую пивоварню*
  words: |
    Слова та літери, які будуть змінені під час спілкування в нетверезому стані.
    Буде оброблено від першого до останнього, і написане речення буде змінено в такому порядку.

    replace: Слово або літера для заміни. (Особливі значення: "-space" — замінює пробіл, "-random" — вставляє в випадкове місце, "-all" — усе, "-start" — на початку, "-end" — в кінці).)
    to: Чим його замінити.
    pre: Слова та букви перед потрібним словом (розділити на ",")
    match: true = одне з "pre"-слів має бути перед потрібним словом, false = жодне з "pre"-слів не допускається перед потрібним словом.
    alcohol: 1-100 мінімальне сп'яніння, після якого це слово замінюється
    percentage: Імовірність заміни Word у відсотках
  useOtherFiles: |
    Ви також можете оголосити тут власні предмети, рецепти та інгредієнти для казана, але рекомендується використовувати відповідні файли.
    ВАЖЛИВО: користувальницькі предмети, рецепти та інгредієнти для казана, заявлені у відповідних файлах, матимуть пріоритет над заявленими тут! (наприклад, 2 рецепти з однаковою назвою)





recipesFile:
  header: |
    -- Рецепти зілля --

    Правильний посібник для цього розділу можна знайти на нашій вікі тут - https://brewery.lumamc.net/guide/recipies/

    enabled: true, якщо рецепт потрібно ввімкнути, false, якщо його потрібно вимкнути

    name: Різні назви для поганого/нормального/хорошого (можливі коди форматування: наприклад &6 або шістнадцятковий як &#123123)
      name: "Найгірший напій/хороший напій/найкращий напій у моєму житті!"

    ingredients: Список 'матеріал/кількість'
     Маючи в руках предмет, використовуйте /brew ItemName, щоб отримати його матеріал для використання в рецепті
      Список матеріалів знайдете тут: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html
      Додаткові елементи з 'plugin:id' (наразі підтримуються Brewery, Oraxen, ItemsAdder)
      Або спеціальний елемент, визначений вище

    cookingtime: Час у реальних хвилинах, щоб інгредієнти закипіли

    distillruns: Як часто його потрібно дистилювати для повного алкоголю (0=без дистиляції)

    distilltime: Час (в секундах), який займає один процес дистиляції (0 = стандартний час 40 сек, за замовчуванням Майнкрафту — 20 сек).

    wood: Деревина бочки 0=any 1=Birch 2=Oak 3=Jungle 4=Spruce 5=Acacia 6=Dark Oak 7=Crimson 8=Warped 9=Mangrove 10=Cherry 11=Bamboo (12=Cut Copper)
      Бочка Майнкрафт зроблена з дуба

    age: Час у Minecraft-днях, зілля має витримуватися в бочці 0=без старіння

    color: Колір зілля після перегонки/витримки.
      Usable Colors: DARK_RED, RED, BRIGHT_RED, ORANGE, YELLOW, PINK, PURPLE, BLUE, CYAN, WATER, TEAL, OLIVE, GREEN, LIME, BLACK, GREY, BRIGHT_GREY, WHITE
      Or RGB colors (hex: for example '99FF33') (with '') (search for "HTML color" on the internet)

    difficulty: 1-10 точність, необхідна для отримання хорошої якості (1 = неточний/легкий, 10 = дуже точний/важкий)

    alcohol: Абсолютна кількість алкоголю від 0 до 100 у ідеальному зіллі (буде додано безпосередньо гравцю, де 100 означає втрату свідомості).

     lore: Список додаткового тексту на готовому зіллі. (Можливе використання форматувальних кодів, таких як &6)
      Специфічний опис для якості можливий, використовуючи + погано, ++ нормально, +++ добре, додається на початок рядка.
      - +++ Це найкращий напій!
      - ++ Це пристойний напій.
      - + Це найгірший напій.

    servercommands: Список команд, що виконуються -сервером- при вживанні зілля (можна використовувати %player_name% %quality%)
     Специфічні команди для якості можливі, використовуючи + погано, ++ нормально, +++ добре, додається на початок рядка.
     +++ op %player%
     ++ money give %player% 10
     kill %player%
     Виконання команд може бути відкладене, додаючи "/ <кількість>s" в кінець, як-от:

    op Jsinco / 3s

    playercommands: Список команд, що виконуються -гравцем- при вживанні зілля (можна використовувати %player_name% %quality%)
     Специфічні команди для якості можливі, використовуючи + погано, ++ нормально, +++ добре, додається на початок рядка.
     +++ spawn
     ++ home
     + suicide
     Виконання команд може бути відкладене, додаючи "/ <кількість>s" в кінець, як-от:

     op Jsinco / 3s

    drinkmessage: Чат-повідомлення гравцеві під час вживання напою

    drinktitle: Назва на екрані для гравця, коли він вживає напій

    glint: Логічне значення, якщо предмет повинен мати блиск (зачарувати блиск)

    customModelData: Спеціальний тег даних моделі. Це число, яке можна використовувати для додавання власних текстур до предмета.
      Можна вказати один для всіх або один для кожної якості, розділених /
      customModelData: 1
      customModelData: 1/2/3

    effects: Список ефектів/рівнів/тривалості Спеціальне зілля-ефект при вживанні алкоголю, тривалість у секундах.
      Possible Effects: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/potion/PotionEffectType.html
      Можна вказати діапазони для рівня або тривалості за допомогою символу "-", наприклад, 'SPEED/1-2/30-40' = рівень 1 і 30 секунд на гіршому рівні, і рівень 2 і 40 секунд на найкращому.
      Діапазони також працюють у зворотному порядку, наприклад, 'POISON/3-1/20-5' для слабших ефектів при хорошій якості.
      Highest possible Duration: 1638 секунд. Для миттєвих ефектів не потрібно вказувати тривалість.


    'ex' showcases every available option for a recipe:



cauldronFile:
  header: |
    -- Інгредієнти в котлі --
    Інгредієнти, які приймає Котел, і базове зілля, отримане з них
    Вам потрібно лише щось додати сюди, якщо ви хочете вказати спеціальну назву або колір для основного зілля

    name: Назва основного зілля, що виходить із котла (можливе форматування кодів: наприклад &6)

    ingredients: Список 'матеріал/кількість'
     Маючи в руках предмет, використовуйте /brew ItemName, щоб отримати його матеріал для використання в рецепті
      (ідентифікатори елементів замість матеріалу більше не підтримуються bukkit і не працюватимуть)
      A list of materials can be found here: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html

    color: Колір базового зілля з казана. За замовчуванням Бірюзовий
      Usable Colors: DARK_RED, RED, BRIGHT_RED, ORANGE, YELLOW, PINK, PURPLE, BLUE, CYAN, WATER, TEAL, OLIVE, GREEN, LIME, BLACK, GREY, BRIGHT_GREY, WHITE
      Or RGB colors (hex: наприклад '99FF33') (з '') (Шукати "HTML кольори" В інтернеті)

    cookParticles:
      Колір частинок над казаном під час різного часу приготування
      Колір і хвилина, протягом якої має з’явитися кожен колір, тобто один колір через 8 хвилин зникає до іншого через 18 хвилин.
      Як список, кожен колір як назва або RGB, див. вище. Записується як 'Колір/хвилина'
      Зрештою він зникає до останнього кольору, якщо в списку лише один колір, він зникає до сірого

    lore: Список додаткового тексту про базове зілля. (Можливі коди форматування: наприклад &6 або шістнадцятковий як #&<hex>)

    customModelData: Спеціальний тег даних моделі. Це число, яке можна використовувати для додавання власних текстур до предмета.


customItemsFile:
  header: |
    -- Визначте власні елементи --
    Визначений ідентифікатор можна використовувати в рецептах

    matchAny: true, якщо вже достатньо, якщо одна з інформації збігається
    material: Якого типу має бути товар
    name: Яку назву має мати елемент (можливі коди форматування: наприклад &6 або шістнадцятковий як &#<hex>)
    lore: Що має бути в історії предмета
    customModelData: Спеціальні дані моделі (Int). Будь-який номер даних моделі, який предмет повинен мати, у форматі списку.
