# Traduction française pour BreweryX
# Auteur(e) (Author) : rédigé en grande partie par CiaoCiaoBambina.  Les anciennes traductions ont été faites avec
# des traducteurs tels que DeepL, mais j'ai essayé de les remplacer avec des traductions faites à la mains.  Veuillez noter
# qu’avec un fichier de cette taille, une possibilité d'erreurs lors de la traduction est toujours présente.  Vous pouvez me
# contacter à travers GitHub (profil CiaoCiaoBambina) ou Discord (profil ACOGItaliano) pour des erreurs ou corrections.
# J'essayerai d'ajouter ou d'améliorer des traductions à chaque mis-à-jour du plug-in.

config:
  language: |
    Fichier de langage à utiliser [en]
    Valeurs disponibles: en (Anglais), de (Allemande), es (Espagnol), fr (Français), it (Italien), ru (Russe), zh (Chinois), uk (Ukrainian)
  updateCheck: |
    Activer la cherche de mises à jour.  Si oui, veuillez préciser quel service à y utiliser pour vérifier les mises à jour ; si non, préciser « None ».
    Services disponibles : GitHub, Snapshots, Spigot, None [GitHub]
  autosave: "Intervale de la sauvegarde automatique en minutes [10]"
  pluginPrefix: "Préfixe utilisé avec les messages BreweryX"
  debug: "Afficher les messages de débogue dans le journal du serveur (log) [false]"
  storage:
    header: "-- Paramètres de stockage des données --"
    type: |
      Quel type de stockage à y utiliser [FLATFILE]
      Types disponibles: FlatFile, MySQL, SQLite, MongoDB
    database: "Le nom de la base de données.  Si la base est un fichier, ceci serait son nom. [brewery-data]"
  enableHome: "Si le joueur se réveille à son /home lors de sa connexion après un excès alcool (Un plugin de /home est nécessaire!) [true]"
  homeType: |
    Type de la téléportation /home: ['cmd: home']
    bed = Le joueur se téléportera à son lit de réapparition.
    'cmd: home' = /home sera exécuté par le joueur. Il devra avoir la permission sans le délai pour y parvenir!
    'cmd: spawn' = /spawn sera exécuté par le joueur.
    'cmd: whatever' = /whatever sera exécuté par le joueur. (Peu importe)
  enableWake: |
    Si le joueur se « réveille » à un point aléatoire sur la carte à sa connexion, pendant un excès d’alccol (Les points de réveil doivent être ajoutés avec '/brew Wakeup add' via un administrateur.)
    Le joueur se réveillera aléatoirement parmis les deux points de « réveil » les plus proches de lui [true]
  enableLoginDisallow: "Si le joueur reçoit des connexions refusées au serveur s’il est ivre. [true]"
  enableKickOnOverdrink: "Si le joueur s’évanouit (il sera kické) lorsqu’il boit trop d’alcool [false]"
  enablePuke: |
    Si le joueur vomit en cas d’alcoolémie élevée (Le type d’objet « droppé » est configurable en dessous) [true]
    L’objet ne peut pas être collecté et reste sur le sol jusqu’à ce qu’il disparaisse
  pukeItem: |
    L’objet utilisé pour représenter le vomi [Soul_Sand]
    Pourrait également être une liste d’objets [Soul_sand, Slime_block, Dirt]
  pukeDespawntime: |
    Le temps, en secondes, avant que les objets vomi seront supprimé (le défaut de Minecraft est 300 secondes (5 minutes)). [60]
    Si ce temps est changé dans le fichier spigot.yml, la valeur si-dessous sera également changé.
  stumblePercent: "Par combien, en pourcentage, le joueur trébuches, en fonction de son ivresse.  Peut être 0 et même une figure au-delà de 100 [100]"
  showStatusOnDrink: "Permet le joueur de voir son ivresses lorsqu’il boit une boisson ou lorsqu’il consomme un « drainItem ». [true]"
  drainItems: "Consommables 'objet/force'. Réduit le montant d’alcool par <force> lors de la consommation. (liste)"
  enableCauldronParticles: |
    Visionner des particules au-dessus des chaudrons quand ils contiennent des ingrédients et sont placés sur une source de challeur. [true]
    La transition des couleurs de chauffage peut être utile avec la coordination de certaines recettes.
  minimalParticles: "Si les particules de chaudron devraient être réduites à la valeur minimale [false]"
  craft-enableSealingTable: "Si la création et le fonctionnemt de la table de scellage des boissons est activer (créée avec deux bouteille au-dessus de quatres planches de bois) [true, true]"
  sealingTableBlock: |
    Par défaut, Brewery utilise le bloc « SMOKER » comme table de scellage des boissons ; ce paramètre vous permet de le changer.
    IMPORTANT : Il est nécessaire que le bloc choisi est un conteneur — signifiant un bloc qui peur stocker des objets (e.g., SMOKER, CHEST, BLAST_FURNACE).
  alwaysShowQuality: "Toujours montrer les 1-5 étoiles sur les objets en fonction de leur qualité. S’ils sont faux, ils n’apparaîtront que lors de l’infusion. [true]"
  alwaysShowAlc: "Toujours indiquer la teneur en alcool sur les objets. S’il est false, il n’apparaîtra que dans le stand de brassage. [false]"
  showBrewer: "Si le brasseur de la boisson devrait être montré. [false]"
  requireKeywordOnSigns: "Si les barils ne sont créés que lorsque le panneau placé contient le mot « barrel » (ou une traduction) [true]"
  ageInMCBarrels: "Combien de boissons de brasserie peuvent être mises dans les barils « Minecraft » [6]"
  agingYearDuration: "Durée (en minutes) d’une « année » pour la maturation des boissons [20]"
  commandAliases: |
    Pseudonymes pour la commande « /breweryx ».  Nécessite un redémarrage du serveur. (list) [brewery, brew]
  enableEncode: |
    Les ingrédients et autres données de brassage utilisés sont sauvegardés dans tous les articles de brasserie. [false]
    Pour empêcher les clients piratés de lire exactement ce qui a été utilisé pour infuser un élément, les données peuvent être encodées/brouillées.
    Il s’agit d’un processus rapide pour empêcher les joueurs de pirater des recettes, une fois qu’ils obtiennent un boisson.
    Seul inconvénient : les boissons ne peuvent être utilisés que sur un autre serveur avec la même clé de chiffrement.
    Lorsque vous utilisez des boissons sur plusieurs serveurs (BungeeCord), définissez une base de données partagée ci-dessous à « multiServerDB ».
    Activez cette option si vous voulez rendre la tricherie des recettes plus difficile, mais ne partagez pas les infusions par téléchargement mondial, schémas ou autres moyens.
  useOtherPlugins: |
    -- Compatibilité entre plug-ins --

    Activer la vérification des autres plug-ins (si installés) pour les permissions des tonneaux. [true]
    Les plug-ins « Landlord » et « Protection Stones » utilisent l’option « WorldGuard ».  « ClaimChunk » est pris en charge nativement.
  useVirtualChestPerms: |
    Si un coffre « virtuel » ou imaginaire est utilisé pour vérifier avec tous autres plug-ins de protection.
    Ceci pourrait peut-être confondre certains plug-ins anti-tirche.  À part ça, c’est bon et sûr à y utiliser.
    Utilisez-le pour les plug-ins types « résidence » et ceux qui ne vérifient pas tous les cas « PlayerInteractEvent ».
  useLogBlock: "Activer l’historique du contenu des tonneaux avec LogBlock [true]"
  useOffhandForCauldron: "Si les objets tenus par la main secondaire (Offhand) devraient être mis dans le chaudron [false]"
  loadDataAsync: |
    AVERTISSEMENT : Cette option ne fais plus rien.  BreweryX prendra toujours les données en charge
    de manière asynchrone sauf en cas du démarrage et de l’arrêt du serveur.  Cela sera supprimé avec les nouvelles versions du plug-in.
    Ancienne description:
    Si les données des fûts et des chaudrons peuvent être chargés de manière asynchrone ou en arrière-plan [true]
  hangoverDays: "Temps (en jours) pour que les données d’ivresse restent sauvergardées lorsque le joueur est déconnecté, pour appliquer les effets. [7]"
  onlyAllowBrewsInBarrels: "If only Brewery drinks can be put into barrels [false]"
  colorInBarrels-Brewer: "Colorer les informations d’objets (lore) au dépend de la qualité dans un tonneau et/ou dans un stand de brassage (l’alambic) [true, true]"
  openLargeBarrelEverywhere: "Si le grand tonneau peut être ouvert en cliquant sur n’importe quel bloc, non seulement le robinet ou le panneau. Toujours « true » pour les petits tonneaux. [true]"
  barrelInvSizes: |
    Combien de rangées l'inventaire de chaque type de baril doit-il avoir [3,1]
    Doit être un entier entre 1 et 6 (une limitation de Minecraft / GUI)
    (Un redémarrage du serveur est requis pour que les modifications prennent effet)
  brewHopperDump: "Permettre l’élimination de boissons à l’interieur d’une trémie mais en conservant la bouteille [true]"
  enableChatDistortion: |
    -- Paramètres de la distorsion du chat --

    Si le chat écrit est déformé quand le joueur est ivre, de sorte qu’il ressemble à un chat bourré en train d’écrire
    Le degré de distorsion du chat dépend de l’état d’ébriété du joueur
    Ci-dessous sont les paramètres pour ce qui et comment les changements dans le chat se produisent
  logRealChat: "Ecrire dans les « logs » du serveur ce que le joueur avait réellement écrit à la place de la distorsion. [false]"
  distortCommands: "Distordre le texte dans le chat après les commandes spécifiées (liste) [- /gl]"
  distortSignText: "Distordre le texte sur les panneaux pendant l’ivresse [false]"
  distortBypass: |
    Entourer les textes avec ces caractères pour ignorer la distorsion (utilisez « , » (virgule) comme un séparateur) (liste) [- '[,]']
    Example : Hello i am drunk *I am testing Brewery*
  words: |
    words : Les mots et les lettres altérées dans le chat lors d’un état d’ivresse.
    Commence du haut jusqu’au bas. Les phrases sont altérées par l’ordre écrit.

    replace : Mot ou lettre à remplacer (options spéciales : « -space » : remplace les espaces, « -random » : s’insère dans une position aléatoire, « -all » : toute la ligne, « -start » : au début, « -end » : à la fin.)
    to : Ce qui remplacera.
    pre : Les mots et les lettres avant le mot désiré (séparez avec « , »)
    match : true = Si un des mots « pre » est nécessaire avant le mot désiré, false = Aucun des mots « pre » n’est autorisé avant le mot désiré.
    alcohol : 1-100 Le montant minimal d’alcool pour que la distorsion fonctionne.
    percentage : Probabilité en pourcentage que le mot soit remplacé.
  useOtherFiles: |
    Vous pouvez spécifier des objets personnalisés, des ingrédients de chaudron et des recettes ici.  Cependant, l'utilisation de leurs fichiers prédéfinis est suggéré.
    IMPORTANT : Les objets personnalisés, les ingrédients de chaudron et les recettes déclarés dans leurs fichiers prédéfinis auront la priorité sur ceux listés ici.
    Example : si deux recettes ont les mêmes titres/noms, celui spécifié dans le fichier par défaut sera utilié.





recipesFile:
  header: |
    -- Recettes pour les boissons --

    Une guide pour cette section peut se trouver au wiki à cette addresse web : https://brewery.lumamc.net/guide/recipies/

    enabled: « true » si la recette serait activée, « false » si elle devrait être désactivée
    name : Différents noms pour la mauvaise/moyen/bonne qualité (Les codes de mise en forme sont pris en charge : comme par exemple &6 pour la couleur Or.)
    ingredients : Liste des 'matériaux/montant'
      Avec un objet en main, utilisez /brew ItemName pour obtenir son matériau pour une recette de cuisine
      (Les id d’objets à la place des matériaux sont obsolètes pour bukkit)
        Ex : 'Sugar_Cane'
      Une liste des matériaux peuvent-être trouvés ici : https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html
      Plugin items avec 'plugin:id' (Actuellement supporté ExoticGarden, Slimefun, MMOItems, Brewery)
      Ou un élément personnalisé défini ci-dessus
    cookingtime : Temps en minutes réelles durant lesquelles les ingrédients devront bouillir
    distillruns : Combien de fois le breuvage devra être distillé pour un alcool de qualité (0=Ne pas distiller)
    distilltime : Combien de temps (en secondes) dure une distillation (0=Temps par défaut de 40 secondes). MC Par défaut serait de 20 secondes
    wood : Type de bois du baril 0=aucun 1=Bouleau 2=Chêne 3=Jungle 4=Pin 5=Acacia 6=Chêne Noir 7=Crimson 8=Warped 9=Mangrove 10=Cerisier 11=Bambou (12=Cuivre coupé)
      Le tonneau Minecraft est en chêne.
    age : Temps en jours de Minecraft, la potion devra être âgée dans un baril. 0=la boisson ne nécessite pas une période de maturation.
    color : Couleur de la potion après distillation/avoir laissé vieillir.
        Couleurs disponibles : DARK_RED, RED, BRIGHT_RED, ORANGE, YELLOW, PINK, PURPLE, BLUE, CYAN, WATER, TEAL, OLIVE, GREEN, LIME, BLACK, GREY, BRIGHT_GREY, WHITE
        (Dans l’ordre : Rouge foncé, Rouge, Rouge clair, Orange, Jaune, Rose, Pourpre, Bleu, Cyan, Eau, Sarcelle, Olive, Vert, Vert lime, Noir, Gris, Gris clair, Blanc)
      Ou couleurs RGB (hex : par exemple '99FF33') (avec '') (recherche de « couleur HTML » sur l’internet)
    difficulty : 1-10 précision nécessaire pour obtenir une bonne qualité (1 = imprécis/facile, 10 = très précis/difficile)
    alcohol : Le montant d’alcool absolu dans une boisson parfaite (cela sera ajouté directement au joueur, où 100% entraînera l’évanouissement), un degré d’alcooléisme en fait
    lore : Liste des textes supplémentaires sur le breuvage fini. (Codes de formatage possibles : tels que &6)
      Texte spécifique de qualité possible, en utilisant + mauvais, ++ normal, +++ bon, ajouté à l’avant de la ligne.
    servercommands : Liste des commandes exécutées par le -serveur- lors de la consommation de la potion (Peut utiliser %player_name%  %quality%)
    playercommands : Liste des commandes exécutées par le -joueur- lors de la consommation de la potion (Peut utiliser %player_name%  %quality%)
      Texte spécifique de qualité possible, en utilisant + mauvais, ++ normal, +++ bon, ajouté à l’avant de la ligne.
    drinkmessage : Chat-message au joueur lorsqu’il boit la potion
    drinktitle : Titre à l’écran du joueur lorsqu’il boit la potion
    glint : Boolean if the item should have a glint (enchant glint)
    customModelData : Custom Model Data Tag.  Un numéro qui peut être utiliser pour personnaliser l’apparence des boissons en utilisant un « texture pack ».
      Peut être une valeur pour la boisson, peu-importe sa qualité, ou une valeur pour chaque niveau de boisson.
    effects : Liste des effets/durées en secondes lors de la consommation.
      Effets posssible : https://hub.spigotmc.org/javadocs/spigot/org/bukkit/potion/PotionEffectType.html
        POUR LES EFFETS EN FONCTIONS DE LA QUALITE : Les Niveaux (I ou II) ou les Intervalles de durées d’effets doivent être spécifiés avec un « - ».
            Ex : 'SPEED/1-2/30-40' => Vitesse niveau 1 et durée de 30 sec pour la pire qualité, et niveau 2 et durée de 40 sec pour la meilleure.
          Il est aussi possible de faire l’inverse, c’est à dire que le schéma « Meilleure qualité, meilleur effets » soit « Meilleure qualité, effets moins puissants.
          Cela peut-être utile pour des potions avec l’effet poison pour empoisonner moins avec une bonne qualité.
            Ex : 'POISON/3-1/20-5' => Poison de niveau 3 durant 20 sec à la moins bonne qualité et de niveau 1 et de durée 5 sec à la meilleure.
          Durées possibles maximum : 1638 secondes. Les effets instantanés n’ont pas besoin d’avoir une durée spécifiée (Ex : Les potions de soin instantané).


cauldronFile:
  header: |
    -- Ingrédients dans le chaudron --
    Quels sont les ingrédients acceptés par le chaudron et la potion de base qui en résulte
    Il vous suffit d’ajouter quelque chose ici si vous voulez spécifier un nom ou une couleur pour la potion de base

      name : Nom de la potion de base qui sort du chaudron (codes de formatage possibles : tels que &6)
      ingredients : Liste des 'matériaux/montant'
        Avec un objet en main, utilisez /brew ItemName pour obtenir son matériau pour une recette de cuisine
        (Les id d’objets à la place des matériaux sont obsolètes pour bukkit)
        Une liste des matériaux peuvent-être trouvés ici : https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html
      color : Couleur de la potion provenant d’un chaudron.
        Couleurs disponibles : DARK_RED, RED, BRIGHT_RED, ORANGE, YELLOW, PINK, PURPLE, BLUE, CYAN, WATER, TEAL, OLIVE, GREEN, LIME, BLACK, GREY, BRIGHT_GREY, WHITE
          (Dans l’ordre : Rouge foncé, Rouge, Rouge clair, Orange, Jaune, Rose, Pourpre, Bleu, Cyan, Eau, Sarcelle, Olive, Vert, Vert lime, Noir, Gris, Gris clair, Blanc)
        Ou couleurs RGB (hex : par exemple '99FF33') (avec '') (recherchez « couleur HTML » sur l’internet)
      cookParticles :
        Couleurs des particules suspendus en haut du chaudron à des heures de bouillonnement spécifiques
        La couleur et la minute dont elles apparaîssent, i.e. une couleur à 8 minutes qui passe à une autre à 18 minutes.
        Est une liste, chaque couleur étant dénoncée par un nom ou une code RGB/hex.  Veuillez consultez la liste si-dessus.  Écrit comme 'couleur/minute'.
        Ça passera à la dernière couleur à la fin de la liste ; si il n’y existe qu’une couleur, ça passera à gris.
      lore : Liste de texte supplémentaire sur la potion de base. (Codes de format sont possible : tels que &6)
      customModelData : Custom Model Data Tag.  Un numéro qui peut être utiliser pour personnaliser l’apparence des boissons en utilisant un « texture pack ».


customItemsFile:
  header: |
    -- Définir des objets personnalisés --
    L’ID défini peut ensuite être utilisé dans les recettes

      matchAny: si c’est déjà assez si l’une des infos correspond
      material: le type d’article à utiliser
      name: Quel nom l’article doit porter (codes de formatage possibles : tels que &6)
      lore: Ce qui doit être dans la lore de l’objet
      customModelData: Custom Model Data Tag.  Le numéros specifique « Custom Model Data » que l’objet nécessite pour être accepté comme ingrédient.
